function Random_310(Ind_No)

% implemented - USPEX Version 9.3.7
global POP_STRUC
global ORG_STRUC
global OFF_STRUC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%% CREATING random structures using space groups provided %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
newSym = 1;
badSymmetry = 0;
goodBad = 0;
Molecules = struct('MOLCOORS',{},'ZMATRIX',{},'ID',{},'MOLCENTER',{});
%numMols = ORG_STRUC.numMols;

nSplit = length( ORG_STRUC.firstGeneSplit );
numBlocks = ORG_STRUC.firstGeneSplit( ceil(rand(1)*nSplit) );
numMols = ORG_STRUC.numMols*numBlocks;

while ~goodBad

  [typesAList, MtypeLIST, numIons] = GetPOP_MOL(numMols);

   if ORG_STRUC.constLattice    % lat1 = lattice
      lat1 = ORG_STRUC.lattice;
   else                         % lat1 = lattice volume
      lat1 = ORG_STRUC.latVolume*sum(numMols)/sum(ORG_STRUC.numMols);;
   end

   if badSymmetry > 15
      badSymmetry = 0;
      newSym = 1;      % change the symmetry group if can't generate the crystal
   end

   badSymmetry = badSymmetry + 1;

   if newSym
     tmp = find(ORG_STRUC.nsym > 0);
     nsym = tmp(ceil(rand*length(tmp))); % pick a random group from those specified by user
     newSym = 0;
   end
   CenterMat = ORG_STRUC.CenterminDistMatrice;
   splitInto=ORG_STRUC.splitInto;
   if sum(splitInto)>3 
           numMols=numMols/prod(splitInto);
       for i=1:3
           if size(lat1)==[1 1]
              lat1=lat1/splitInto(i);
           elseif size(lat1)==[3 3]
              lat1(i,:)=lat1(i,:)/splitInto(i);
           else
              lat1(i)=lat1(i)/splitInto(i);
           end
       end
    end


   if nsym > 1  % if nsym == 1 - just keep the random candidate that we generated
       cd([ORG_STRUC.homePath '/CalcFoldTemp']);
       [candidate, lat, numSites, Operation, errorS, errorN, P, PB] = symope_310(nsym, numMols, lat1, CenterMat);
       cd(ORG_STRUC.homePath)
       if errorN==1
          ORG_STRUC.nsym(nsym)=0;
          newSym = 1;
       end
   end

    if errorS==0
      for item=1:30

        Molecules = [];
        [typesAList, MtypeLIST, numIons] = GetPOP_MOL(numMols);
        Molecules = GetOrientation(candidate, lat, numSites(:,1), Operation, MtypeLIST, nsym, P, PB);
        for innerInder= 1: length(MtypeLIST)
            format = ORG_STRUC.STDMOL(MtypeLIST(innerInder)).format;
            Molecules(innerInder).ZMATRIX = NEW_coord2Zmatrix(Molecules(innerInder).MOLCOORS,format);
        end
            goodBad = newMolCheck(Molecules,lat, MtypeLIST, ORG_STRUC.minDistMatrice);
        if goodBad
            if sum(splitInto)>3
               [Molecules, numMols, lat] = SuperMol(Molecules, numMols, lat, splitInto);
               [typesAList, MtypeLIST, numIons] = GetPOP_MOL(numMols);
            end

            OFF_STRUC.POPULATION(Ind_No).LATTICE = lat;
            OFF_STRUC.POPULATION(Ind_No).MOLECULES = Molecules;
            OFF_STRUC.POPULATION(Ind_No).numIons = numIons;
            OFF_STRUC.POPULATION(Ind_No).numMols = numMols;
            OFF_STRUC.POPULATION(Ind_No).MtypeLIST = MtypeLIST;
            OFF_STRUC.POPULATION(Ind_No).typesAList = typesAList;
            OFF_STRUC.POPULATION(Ind_No).howCome = ' Random ';
            OFF_STRUC.POPULATION(Ind_No).Parents = [];
            %disp(['Structure ' num2str(Ind_No) '  generated by random']);
            disp(['Molecular Crystal '  num2str(Ind_No) ' built with the symmetry group ' num2str(nsym) ' (' spaceGroups(nsym)  ')']);

            % To balance the compositions 
            numBlocks = ORG_STRUC.firstGeneSplit( ceil(rand(1)*nSplit) );
            numMols = ORG_STRUC.numMols*numBlocks;
           break
        end

      end
     end
  end
