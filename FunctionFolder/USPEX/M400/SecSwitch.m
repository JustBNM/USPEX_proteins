function SecSwitch(Ind_No)
%function SecSwitch()
%Ind_No = 5;


global POP_STRUC
global ORG_STRUC
global OFF_STRUC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%% CREATING Offspring with Secondary Switch %%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

angles_num = size(POP_STRUC.POPULATION(1).ANGLES(:,:), 1);

% Select a structure using tournament scheme:
toMutate = find(ORG_STRUC.tournament>RandInt(1,1,[0,max(ORG_STRUC.tournament)-1]));
ind      = POP_STRUC.ranking(toMutate(end));

sec_struct = POP_STRUC.POPULATION(ind).SEC_STRUCT;

rand_structure = POP_STRUC.POPULATION(ind).ANGLES(1:end,:);

potentialOffspring = rand_structure;



%disp(['Secondary structures (each residue): ' strjoin(sec_struct, ' ')]);
%disp(['Secondary structures (compressed)  : ' strjoin(cont_seq.names, ' ')]);

%disp(['Secondary structures (each residue): ' strrep(reshape(char(sec_struct)',1,[]), ' ',' ')    ]);
%disp(['Secondary structures (compressed)  : ' strrep(reshape(char(cont_seq.names)',1,[]), ' ',' ')]);

% Select a secondary structure to change it to another secondary structure
%sec2change = RandInt(1,1,[1,size(cont_seq.names,2)]);
%new_secstr = RandInt(1,1,[1,7]);
[nothing, output] = unix([ 'extract_angles.py ' num2str(ORG_STRUC.numIons)]);
output = split(output(1:end-1));
phi = output(1:size(output)/2);
psi = output(1 + size(output)/2 : end);
start_new_secstr = RandInt(1,1,[1, ORG_STRUC.numIons - size(phi,1) + 1]);
    
j=1;
for i=start_new_secstr:start_new_secstr+size(phi,1) - 1
    potentialOffspring(i,:) = [str2double(phi{j,1}), str2double(psi{j,1})];
    j=j+1;
end

%disp([cont_seq.names{sec2change} ' from ' num2str(cont_seq.numbers(sec2change,1)) ' to ' num2str(cont_seq.numbers(sec2change,2)) ' will be changed to ' name]);
%for i=cont_seq.numbers(sec2change,1):cont_seq.numbers(sec2change,2)
%    potentialOffspring(i,:) = [phi, psi]
%end  
  


OFF_STRUC.POPULATION(Ind_No).ANGLES   = potentialOffspring;
% We need just first list of amino acids, since it won't change:
OFF_STRUC.POPULATION(Ind_No).RESIDUES = POP_STRUC.POPULATION(1).RESIDUES;
OFF_STRUC.POPULATION(Ind_No).numIons  = ORG_STRUC.numIons;
OFF_STRUC.POPULATION(Ind_No).howCome  = 'SecSwitch';

info_parents = struct('parent', {}, 'enthalpy', {});
info_parents(1).parent = num2str(POP_STRUC.POPULATION(ind).Number);
info_parents.enthalpy = POP_STRUC.POPULATION(ind).Enthalpies(end)/ORG_STRUC.numIons;
OFF_STRUC.POPULATION(Ind_No).Parents = info_parents;


disp(['Structure ' num2str(Ind_No) ' generated by Secondary Switch']);
