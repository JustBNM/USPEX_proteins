function createORG_EA(inputFile)

% USPEX Version 9.3.0
% new tags: dimension/varcomp/molecule
% deleted tags: supercomputer name
warning off
global ORG_STRUC

getPy=[ORG_STRUC.USPEXPath,'/FunctionFolder/getInput.py'];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%  POPULATION    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% how many generations shall be calculated
%[nothing, numGenerations] =unix (['./getStuff ' inputFile ' numGenerations 1']);
numGenerations = python_uspex(getPy, ['-f ' inputFile ' -b numGenerations -c 1']);
if ~isempty(numGenerations)
    ORG_STRUC.numGenerations = str2num(numGenerations);
end

% number of repeating best structure that stops the calculation
%[nothing, stopCrit] =unix (['./getStuff ' inputFile ' stopCrit 1']);
stopCrit = python_uspex(getPy, ['-f ' inputFile ' -b stopCrit -c 1']);
if isempty(stopCrit)
    if ORG_STRUC.varcomp
        ORG_STRUC.stopCrit = ORG_STRUC.maxAt; % default
    else
        ORG_STRUC.stopCrit = sum(ORG_STRUC.numIons); % default
    end
    if ORG_STRUC.molecule
        ORG_STRUC.stopCrit = ORG_STRUC.stopCrit*3; %it is rude apporximation
    end
else
    ORG_STRUC.stopCrit = str2num(stopCrit);
end


% how many individuals per generation
%[nothing, populationSize] =unix (['./getStuff ' inputFile ' populationSize 1']);
populationSize = python_uspex(getPy, ['-f ' inputFile ' -b populationSize -c 1']);
if isempty(populationSize)
    if ORG_STRUC.varcomp==1
        pS = 10*round(2*ORG_STRUC.maxAt/10); % default
    else
        pS = 10*round(2*sum(ORG_STRUC.numIons)/10); % default
    end
    if pS < 10
        pS = 10;
    elseif pS > 60
        pS = 60;
    end
    populationSize = num2str(pS);
end
ORG_STRUC.populationSize = str2num(populationSize);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%          Fractions           %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% how big a fraction of a generation shall be included
% in the process of heredity (the best ones of course)
%[nothing, bestFrac] =unix (['./getStuff ' inputFile ' bestFrac 1']);
bestFrac = python_uspex(getPy, ['-f ' inputFile ' -b bestFrac -c 1']);
if ~isempty(bestFrac)
    ORG_STRUC.bestFrac = str2num(bestFrac);
end

%[nothing, AutoFrac] = unix (['./getStuff ' inputFile ' AutoFrac 1']);
AutoFrac = python_uspex(getPy, ['-f ' inputFile ' -b AutoFrac -c 1']);
if ~isempty(AutoFrac)
    ORG_STRUC.AutoFrac = str2num(AutoFrac);
end

% how big shall the fraction of offsprings generated by heredity be
%[nothing, fracGene] = unix (['./getStuff ' inputFile ' fracGene 1']);
fracGene = python_uspex(getPy, ['-f ' inputFile ' -b fracGene -c 1']);
if ~isempty(fracGene)
    ORG_STRUC.fracGene = str2num(fracGene);
end
%[nothing, fracRand] = unix(['./getStuff ' inputFile ' fracRand 1']);
fracRand = python_uspex(getPy, ['-f ' inputFile ' -b fracRand -c 1']);
if ~isempty(fracRand)
    ORG_STRUC.fracRand = str2num(fracRand);
end
%[nothing, fracPerm] = unix(['./getStuff ' inputFile ' fracPerm 1']);
fracPerm = python_uspex(getPy, ['-f ' inputFile ' -b fracPerm -c 1']);
if isempty(fracPerm)
    if (length(ORG_STRUC.atomType) > 1) & (ORG_STRUC.varcomp==0)
        fracPerm = '0.1'; % default
    else
        fracPerm = '0.0'; % default
    end
end
ORG_STRUC.fracPerm = str2num(fracPerm);

%[nothing, fracLatMut] = unix(['./getStuff ' inputFile ' fracLatMut 1']);
fracLatMut = python_uspex(getPy, ['-f ' inputFile ' -b fracLatMut -c 1']);
if isempty(fracLatMut)
    if ORG_STRUC.constLattice == 0
        fracLatMut = '0.1'; % default
    else
        fracLatMut = '0.0'; % default
    end
end
ORG_STRUC.fracLatMut = str2num(fracLatMut);

%[nothing, fracAtomsMut] = unix(['./getStuff ' inputFile ' fracAtomsMut 1']);
fracAtomsMut = python_uspex(getPy, ['-f ' inputFile ' -b fracAtomsMut -c 1']);
if ~isempty(fracAtomsMut)
    ORG_STRUC.fracAtomsMut = str2num(fracAtomsMut);
end
%[nothing, howManyMut] = unix(['./getStuff ' inputFile ' mutationDegree 1']);

if ORG_STRUC.molecule==1 | ((ORG_STRUC.dimension==-4)  &&  (ORG_STRUC.molecule==0)  &&  (ORG_STRUC.varcomp==0))
    %[nothing, fracRotMut] =unix (['./getStuff ' inputFile ' fracRotMut 1']);
    fracRotMut = python_uspex(getPy, ['-f ' inputFile ' -b fracRotMut -c 1']);
    if isempty(fracRotMut)
        fracRotMut = '0.1'; % default
    end
    ORG_STRUC.fracRotMut = str2num(fracRotMut);
else
    ORG_STRUC.fracRotMut = 0;
end

if ORG_STRUC.dimension == -4
    fracSecSwitch = python_uspex(getPy, ['-f ' inputFile ' -b fracSecSwitch -c 1']);
    if isempty(fracSecSwitch)
        fracSecSwitch = '0.0'; % default
    end
    ORG_STRUC.fracSecSwitch = str2num(fracSecSwitch);

    fracShiftBorder = python_uspex(getPy, ['-f ' inputFile ' -b fracShiftBorder -c 1']);
    if isempty(fracShiftBorder)
        fracShiftBorder = '0.0'; % default
    end
    ORG_STRUC.fracShiftBorder = str2num(fracShiftBorder);
end

if ORG_STRUC.varcomp == 1 | ORG_STRUC.dimension == 2
    %[nothing, fracTrans] = unix (['./getStuff ' inputFile ' fracTrans 1']);
    fracTrans = python_uspex(getPy, ['-f ' inputFile ' -b fracTrans -c 1']);
    if isempty(fracTrans)
        if size(ORG_STRUC.numIons, 1) >1 | ORG_STRUC.dimension==2
            fracTrans = '0.1'; % default
        else
            fracTrans = '0'; % default
        end
    end
    ORG_STRUC.fracTrans = str2num(fracTrans);
else
    ORG_STRUC.fracTrans = 0;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%  Mutation  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%[nothing, howManyMut] = unix(['./getStuff ' inputFile ' mutationDegree 1']);
howManyMut = python_uspex(getPy, ['-f ' inputFile ' -b mutationDegree -c 1']);
if isempty(howManyMut)
    howManyMut = 0;
    for i = 1 : length(ORG_STRUC.atomType)
        howManyMut = howManyMut + str2num(covalentRadius(ceil(ORG_STRUC.atomType(i))));
    end
    ORG_STRUC.howManyMut = 3*howManyMut/length(ORG_STRUC.atomType);
else
    ORG_STRUC.howManyMut = str2num(howManyMut);
end

% standard deviation of the epsilons in the lattice strain matrix
%[nothing, mutationRate] = unix (['./getStuff ' inputFile ' mutationRate 1']);
mutationRate = python_uspex(getPy, ['-f ' inputFile ' -b mutationRate -c 1']);
if ~isempty(mutationRate)
    ORG_STRUC.mutationRate = str2num(mutationRate);
end

% spin mutation 
if ORG_STRUC.spin == 1
   fracSpin = python_uspex(getPy, ['-f ' inputFile ' -b fracSpinMut -c 1']);
   if ~isempty(fracSpin)
        ORG_STRUC.fracSpin = str2num(fracSpin);
   end
end

% what generations are produced by softmutation only, format : 1-3 5 6-9 15  etc
%[nothing, softMutOnly] = unix (['./getFromTo softMutOnly EndSoftOnly ' inputFile]);
softMutOnly = python_uspex(getPy, ['-f ' inputFile ' -b softMutOnly -e EndSoftOnly']);
ORG_STRUC.softMutOnly = zeros(ORG_STRUC.numGenerations + 1,1);
c1 = findstr(softMutOnly, ' ');
c2 = findstr(softMutOnly, '-');
c = sort(str2num(['0 ' num2str(c1) ' ' num2str(c2)]));
c(end+1) = length(softMutOnly) + 1;
ind1 = 1;
for i = 2 : length(c)
    if c(i-1)+1 > c(i)-1
        continue
    end
    ind2 = str2num(softMutOnly(c(i-1)+1 : c(i)-1));
    if ind2 == 0
        ind1 = 1;
        continue
    end
    if ~isempty(find(c2 == c(i-1)))
        for j = ind1 : ind2
            ORG_STRUC.softMutOnly(j) = 1;
        end
    else
        ORG_STRUC.softMutOnly(ind2) = 1;
    end
    ind1 = ind2;
end

% after this generation we use coormutation instead of softmutation (except best structure not softmutated yet)
%[nothing, softMutTill] = unix (['./getStuff ' inputFile ' softMutTill 1']);
softMutTill = python_uspex(getPy, ['-f ' inputFile ' -b softMutTill -c 1']);
if isempty(softMutTill)
    softMutTill = num2str(ORG_STRUC.numGenerations); % default
end
ORG_STRUC.softMutTill = str2num(softMutTill);


if ORG_STRUC.varcomp==1 | ORG_STRUC.dimension==2
    % max fraction of the uniform, between 0 and max, distribution of the transmutation fraction per MUTANT
    %[nothing, howManyTrans] = unix (['./getStuff ' inputFile ' howManyTrans 1']);
    howManyTrans = python_uspex(getPy, ['-f ' inputFile ' -b howManyTrans -c 1']);
    if isempty(howManyTrans)
        if size(ORG_STRUC.numIons, 1) >1 | ORG_STRUC.dimension==2
            howManyTrans = '0.2'; % default
        else
            howManyTrans = '0.0'; % default for autovarcomp
        end
    end
    ORG_STRUC.howManyTrans = str2num(howManyTrans);
end


try
    %[nothing, specificSwaps] = unix(['./getFromTo specificSwaps EndSpecific ' inputFile]);
    specificSwaps = python_uspex(getPy, ['-f ' inputFile ' -b specificSwaps -e EndSpecific']);
    ORG_STRUC.specificSwaps = str2num(specificSwaps);
    if isempty(ORG_STRUC.specificSwaps)
        ORG_STRUC.specificSwaps = 0;
    end
catch
    ORG_STRUC.specificSwaps = 0;
end

% maximum of normal distribution of the number of swaps per MUTANT
%[nothing, howManySwaps] = unix(['./getStuff ' inputFile ' howManySwaps 1']);
howManySwaps = python_uspex(getPy, ['-f ' inputFile ' -b howManySwaps -c 1']);
if isempty(howManySwaps) % defaults :
    if ORG_STRUC.varcomp | (ORG_STRUC.fracPerm == 0)
        howManySwaps = '0';
    elseif (size(ORG_STRUC.specificSwaps,1) == 1) & (size(ORG_STRUC.specificSwaps,2) == 1) % 0 and not varcomp
        howManySwaps = num2str(round(min(ORG_STRUC.numIons)/2));
    else
        howMS = 0;
        for i = 1 : size(ORG_STRUC.specificSwaps, 1)
            howMS = howMS + min(ORG_STRUC.numIons(ORG_STRUC.specificSwaps(i,1)), ORG_STRUC.numIons(ORG_STRUC.specificSwaps(i,2)))/2;
        end
        howManySwaps = num2str(round(howMS));
    end
end
ORG_STRUC.howManySwaps = str2num(howManySwaps);

try
    %[nothing, specificTrans] = unix(['./getFromTo specificTrans EndTransSpecific ' inputFile]);
    specificTrans = python_uspex(getPy, ['-f ' inputFile ' -b specificTrans -e EndTransSpecific']);
    ORG_STRUC.specificTrans = str2num(specificTrans);
    if isempty(ORG_STRUC.specificTrans)
        ORG_STRUC.specificTrans = 0;
    end
catch
    ORG_STRUC.specificTrans = 0;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%% Heredity %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% 0 - 2 parents, 1 - many parents for 1 structure
%[nothing, manyParents] = unix(['./getStuff ' inputFile ' manyParents 1']);
manyParents = python_uspex(getPy, ['-f ' inputFile ' -b manyParents -c 1']);
if ~isempty(manyParents)
    ORG_STRUC.manyParents = str2num(manyParents);
end
%[nothing, numparents] = unix(['./getStuff ' inputFile ' numberparents 1']);
numparents = python_uspex(getPy, ['-f ' inputFile ' -b numberparents -c 1']);
if ~isempty(numparents)
    ORG_STRUC.numParents = str2num(numparents);
end
if ORG_STRUC.numParents > 2
    ORG_STRUC.manyParents = 1;
end

% for many parents - min and max width of the slices to split the cell into
%[nothing, minSlice] = unix(['./getStuff ' inputFile ' minSlice 1']);
minSlice = python_uspex(getPy, ['-f ' inputFile ' -b minSlice -c 1']);
if ~isempty(minSlice)
    ORG_STRUC.minSlice = str2num(minSlice);
end

%[nothing, maxSlice] = unix(['./getStuff ' inputFile ' maxSlice 1']);
maxSlice = python_uspex(getPy, ['-f ' inputFile ' -b maxSlice -c 1']);
if ~isempty(maxSlice)
    ORG_STRUC.maxSlice = str2num(maxSlice);
end

% how big a fraction of structures generated by heredity shall be shifted in all dimensions
%[nothing, percSliceShift] =unix (['./getStuff ' inputFile ' percSliceShift 1']);
percSliceShift = python_uspex(getPy, ['-f ' inputFile ' -b percSliceShift -c 1']);
if ~isempty(percSliceShift)
    ORG_STRUC.percSliceShift = str2num(percSliceShift);
end


%[nothing, howManySliceIterations] = unix (['./getStuff ' inputFile ' howManySliceIterations 1']);
%howManySliceIterations = python_uspex(getPy, ['-f ' inputFile ' -b howManySliceIterations -c 1']);
%if ~isempty(howManySliceIterations)
%    ORG_STRUC.Nslabs = str2num(howManySliceIterations);
%end
%[nothing, maxDistHeredity] = unix (['./getStuff ' inputFile ' maxDistHeredity 1']);

maxDistHeredity = python_uspex(getPy, ['-f ' inputFile ' -b maxDistHeredity -c 1']);
if ~isempty(maxDistHeredity)
    ORG_STRUC.maxDistHeredity = str2num(maxDistHeredity);
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%Best Structures           %%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



% how many best guys to be taken in account for new pop
%[nothing, keepBestHM] = unix (['./getStuff ' inputFile ' keepBestHM 1']);
keepBestHM =  python_uspex(getPy, ['-f ' inputFile ' -b keepBestHM -c 1']);
if isempty(keepBestHM)
    keepBestHM = num2str(round(0.15*ORG_STRUC.populationSize)); % default
end
ORG_STRUC.keepBestHM = str2num(keepBestHM);
if ORG_STRUC.keepBestHM < 1
    ORG_STRUC.keepBestHM = 1;
end

% dynamicalBestHM = 1 means that value of keepBestHM can vary during calculations with initial ORG_STRUC.keepBestHM as upper bound
% = 2 - clusterization algorithm used to keep exactly keepBestHM structures, as diverse as possible
%[nothing, dynamicalBestHM] = unix (['./getStuff ' inputFile ' dynamicalBestHM 1']);
dynamicalBestHM = python_uspex(getPy, ['-f ' inputFile ' -b dynamicalBestHM -c 1']);
if ~isempty(dynamicalBestHM)
    ORG_STRUC.dynamicalBestHM = str2num(dynamicalBestHM);
end
% should the old guys be reoptimized?
%[nothing, reoptOld] = unix (['./getStuff ' inputFile ' reoptOld 1']);
reoptOld = python_uspex(getPy, ['-f ' inputFile ' -b reoptOld -c 1']);
if ~isempty(reoptOld)
    ORG_STRUC.reoptOld = str2num(reoptOld);
end

